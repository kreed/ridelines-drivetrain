name: Deploy to AWS Lambda

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  AWS_REGION: us-west-2
  CARGO_TERM_COLOR: always

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      
    - name: Cache Cargo dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        
    - name: Run tests
      run: cargo test
      
    - name: Run clippy
      run: cargo clippy -- -D warnings
      
    - name: Check formatting
      run: cargo fmt --check

  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Install Rust toolchain with Cargo Lambda
      uses: moonrepo/setup-rust@v1
      with:
        bins: cargo-lambda

    - name: Install Zig toolchain
      uses: mlugg/setup-zig@v2
      with:
        version: 0.14.1

    - name: Cache Cargo dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-lambda-${{ hashFiles('**/Cargo.lock') }}
      
    - name: Build Lambda function
      run: cargo lambda build --release --features lambda
      
    - name: Create deployment package
      run: |
        mkdir -p target/lambda
        cp target/lambda/intervals-mapper/bootstrap target/lambda/
        cd target/lambda && zip intervals-mapper.zip bootstrap
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: lambda-deployment-package
        path: target/lambda/intervals-mapper.zip

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
    - uses: actions/checkout@v4
    
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: lambda-deployment-package
        path: target/lambda/
        
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Setup OpenTofu
      uses: opentofu/setup-opentofu@v1
      with:
        tofu_version: "1.8.0"
        
    - name: OpenTofu Init
      working-directory: terraform
      run: tofu init
      
    - name: OpenTofu Plan
      working-directory: terraform
      run: tofu plan -var="intervals_api_key=${{ secrets.INTERVALS_API_KEY }}"
      
    - name: OpenTofu Apply
      working-directory: terraform
      run: tofu apply -auto-approve -var="intervals_api_key=${{ secrets.INTERVALS_API_KEY }}"

  validate-opentofu:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup OpenTofu
      uses: opentofu/setup-opentofu@v1
      with:
        tofu_version: "1.8.0"
        
    - name: OpenTofu Format Check
      working-directory: terraform
      run: tofu fmt -check
      
    - name: OpenTofu Init
      working-directory: terraform
      run: tofu init -backend=false
      
    - name: OpenTofu Validate
      working-directory: terraform
      run: tofu validate
