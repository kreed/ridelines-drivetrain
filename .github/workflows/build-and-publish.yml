name: Build and Publish Drivetrain

on:
  push:
    branches: [main]
    paths-ignore:
      - '*.md'
      - '.gitignore'
      - 'LICENSE'
  pull_request:
    branches: [main]
    paths-ignore:
      - '*.md'
      - '.gitignore'
      - 'LICENSE'
  workflow_dispatch:

permissions:
  contents: read
  packages: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: kreed/ridelines-drivetrain

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    name: Test Rust Code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install cargo-lambda
        uses: taiki-e/install-action@cargo-lambda

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2

      - name: Run tests
        run: cargo test

      - name: Run clippy
        run: cargo clippy -- -D warnings

      - name: Check formatting
        run: cargo fmt --check

  build:
    name: Build Lambda Package
    runs-on: ubuntu-latest
    container:
      image: public.ecr.aws/lambda/provided:al2023

    steps:
      - name: Install build dependencies
        run: |
          dnf update -y
          dnf install -y cargo git tar

      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2

      - name: Install cargo-lambda
        run: cargo install cargo-lambda

      - name: Build Lambda function
        run: cargo lambda build --release --output-format zip --compiler cargo

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: lambda-artifacts
          path: |
            target/lambda/auth_lambda/bootstrap.zip
            target/lambda/auth_verify_lambda/bootstrap.zip
            target/lambda/user_lambda/bootstrap.zip
            target/lambda/sync_lambda/bootstrap.zip
            openapi/ridelines-api.yaml

  publish:
    name: Publish Lambda Package
    needs: [test, build]
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: lambda-artifacts
          path: artifacts/

      - name: Get drivetrain commit SHA
        id: drivetrain_sha
        run: |
          COMMIT_SHA=$(git rev-parse HEAD)
          echo "sha=${COMMIT_SHA}" >> $GITHUB_OUTPUT
          echo "Drivetrain commit SHA: ${COMMIT_SHA}"

      - name: Create Lambda Dockerfile
        run: |
          cat > Dockerfile.lambda << 'EOF'
          FROM scratch
          COPY artifacts/target/lambda/auth_lambda/bootstrap.zip /auth-lambda-package.zip
          COPY artifacts/target/lambda/auth_verify_lambda/bootstrap.zip /auth-verify-lambda-package.zip
          COPY artifacts/target/lambda/user_lambda/bootstrap.zip /user-lambda-package.zip
          COPY artifacts/target/lambda/sync_lambda/bootstrap.zip /sync-lambda-package.zip
          COPY artifacts/openapi/ridelines-api.yaml /ridelines-api.yaml
          EOF

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for Lambda
        id: meta-lambda
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Lambda container image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile.lambda
          push: true
          tags: ${{ steps.meta-lambda.outputs.tags }}
          labels: |
            ${{ steps.meta-lambda.outputs.labels }}
            ridelines.drivetrain.commit=${{ steps.drivetrain_sha.outputs.sha }}

      - name: Trigger bundle build
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.FRAME_REPO_TOKEN }}
          script: |
            await github.rest.actions.createWorkflowDispatch({
              owner: 'kreed',
              repo: 'ridelines-frame',
              workflow_id: 'build-bundle.yml',
              ref: 'main',
              inputs: {
                triggered_by: 'drivetrain'
              }
            });
            console.log('Bundle build triggered from drivetrain workflow');

      - name: Lambda package summary
        run: |
          echo "## Lambda Package Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "✅ All Lambda functions built successfully:" >> $GITHUB_STEP_SUMMARY

          # Define lambdas with their descriptions
          declare -A lambdas=(
            ["auth_lambda"]="OAuth flow"
            ["auth_verify_lambda"]="Custom authorizer"
            ["user_lambda"]="Protected APIs"
            ["sync_lambda"]="Activity processing"
          )

          # Loop through each lambda and add size info
          for lambda in "${!lambdas[@]}"; do
            size=$(du -h "artifacts/target/lambda/${lambda}/bootstrap.zip" 2>/dev/null | cut -f1 || echo "?")
            echo "  - ${lambda//_/-} - ${size} (${lambdas[$lambda]})" >> $GITHUB_STEP_SUMMARY
          done

          echo "✅ Container image published to registry" >> $GITHUB_STEP_SUMMARY
          echo "📦 Package: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}" >> $GITHUB_STEP_SUMMARY
          echo "🏷️ Tags: " >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.meta-lambda.outputs.tags }}" >> $GITHUB_STEP_SUMMARY
          echo "🔗 Bundle build triggered in frame repository" >> $GITHUB_STEP_SUMMARY
