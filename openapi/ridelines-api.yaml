openapi: 3.0.3
info:
  title: Ridelines API
  description: GPS activity visualization system API with OAuth authentication
  version: 1.0.0
  contact:
    name: Ridelines
    url: https://ridelines.xyz

servers:
  - url: https://api.ridelines.xyz
    description: Production API
  - url: https://api.dev.ridelines.xyz
    description: Development API

# YAML anchors for CORS templates
x-cors-templates:
  cors-headers: &cors-headers
    Access-Control-Allow-Origin:
      schema:
        type: string
    Access-Control-Allow-Methods:
      schema:
        type: string
    Access-Control-Allow-Headers:
      schema:
        type: string
    Access-Control-Allow-Credentials:
      schema:
        type: string

  cors-response-params: &cors-response-params
    method.response.header.Access-Control-Allow-Origin: "'${frontend_origin}'"
    method.response.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS'"
    method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,Cookie'"
    method.response.header.Access-Control-Allow-Credentials: "'true'"

  cors-options-integration: &cors-options-integration
    type: mock
    requestTemplates:
      application/json: '{"statusCode": 200}'
    responses:
      default:
        statusCode: 200
        responseParameters: *cors-response-params
        responseTemplates:
          application/json: '{}'

  cors-response-headers: &cors-response-headers
    Access-Control-Allow-Origin:
      schema:
        type: string
    Access-Control-Allow-Credentials:
      schema:
        type: string

  cors-integration-response: &cors-integration-response
    default:
      statusCode: 200
      responseParameters:
        method.response.header.Access-Control-Allow-Origin: "'${frontend_origin}'"
        method.response.header.Access-Control-Allow-Credentials: "'true'"

# Common response templates
x-response-templates:
  error-401: &error-401
    description: Authentication required or invalid token
    headers: *cors-response-headers
    content:
      application/json:
        schema:
          $ref: '#/components/schemas/ErrorResponse'

  error-400: &error-400
    description: Invalid or missing parameters
    headers: *cors-response-headers
    content:
      application/json:
        schema:
          $ref: '#/components/schemas/ErrorResponse'

  error-409: &error-409
    description: Sync already in progress for user
    headers: *cors-response-headers
    content:
      application/json:
        schema:
          $ref: '#/components/schemas/ErrorResponse'

  error-500: &error-500
    description: Internal server error
    headers: *cors-response-headers
    content:
      application/json:
        schema:
          $ref: '#/components/schemas/ErrorResponse'

# Common integration templates
x-integration-templates:
  user-lambda-integration: &user-lambda-integration
    type: aws_proxy
    httpMethod: POST
    uri: "arn:aws:apigateway:$${AWS::Region}:lambda:path/2015-03-31/functions/${user_lambda_arn}/invocations"
    passthroughBehavior: when_no_match
    contentHandling: CONVERT_TO_TEXT
    responses: *cors-integration-response

  auth-lambda-integration: &auth-lambda-integration
    type: aws_proxy
    httpMethod: POST
    uri: "arn:aws:apigateway:$${AWS::Region}:lambda:path/2015-03-31/functions/${auth_lambda_arn}/invocations"
    passthroughBehavior: when_no_match
    contentHandling: CONVERT_TO_TEXT

paths:
  # Auth endpoints (no authentication required)
  /auth/login:
    get:
      summary: Initiate OAuth login flow
      description: Redirect user to intervals.icu OAuth authorization page
      operationId: loginStart
      tags:
        - Authentication
      parameters:
        - name: redirect_path
          in: query
          description: Optional path to redirect to after successful authentication
          schema:
            type: string
            example: "/dashboard"
      responses:
        '302':
          description: Redirect to intervals.icu OAuth authorization page
          headers:
            Location:
              description: OAuth authorization URL
              schema:
                type: string
                format: uri
                example: "https://intervals.icu/oauth/authorize?response_type=code&client_id=..."
        '500': *error-500
      x-amazon-apigateway-integration: *auth-lambda-integration

  /auth/callback:
    get:
      summary: Complete OAuth login flow
      description: Exchange authorization code for JWT token and redirect to frontend
      operationId: loginCallback
      tags:
        - Authentication
      parameters:
        - name: code
          in: query
          required: true
          description: Authorization code from intervals.icu
          schema:
            type: string
        - name: state
          in: query
          required: true
          description: State parameter for CSRF protection
          schema:
            type: string
            format: uuid
      responses:
        '302':
          description: Authentication successful, redirect to frontend
          headers:
            Location:
              description: Frontend URL to redirect to
              schema:
                type: string
                format: uri
                example: "https://ridelines.xyz/dashboard"
            Set-Cookie:
              description: JWT authentication cookie
              schema:
                type: string
                example: "ridelines_auth=eyJ...; HttpOnly; Secure; SameSite=Strict"
        '400': *error-400
        '500': *error-500
      x-amazon-apigateway-integration: *auth-lambda-integration

  # Protected endpoints (require JWT authentication)
  /user:
    options:
      summary: CORS preflight for /user
      description: Handle CORS preflight request
      responses:
        '200':
          description: CORS preflight response
          headers: *cors-headers
      x-amazon-apigateway-integration: *cors-options-integration
    get:
      summary: Get user profile and PMTiles URL
      description: Retrieve authenticated user's profile and activity data URL
      operationId: getUserProfile
      tags:
        - User
      security:
        - JWTAuth: []
      responses:
        '200':
          description: User profile retrieved successfully
          headers: *cors-response-headers
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfileResponse'
        '401': *error-401
        '500': *error-500
      x-amazon-apigateway-integration: *user-lambda-integration

  /sync:
    options:
      summary: CORS preflight for /sync
      description: Handle CORS preflight request
      responses:
        '200':
          description: CORS preflight response
          headers: *cors-headers
      x-amazon-apigateway-integration: *cors-options-integration
    post:
      summary: Trigger activity sync
      description: Start synchronization of activities from intervals.icu for authenticated user
      operationId: triggerSync
      tags:
        - Sync
      security:
        - JWTAuth: []
      responses:
        '202':
          description: Sync initiated successfully
          headers: *cors-response-headers
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SyncResponse'
        '401': *error-401
        '409': *error-409
        '500': *error-500
      x-amazon-apigateway-integration: *user-lambda-integration

  /sync/status:
    options:
      summary: CORS preflight for /sync/status
      description: Handle CORS preflight request
      responses:
        '200':
          description: CORS preflight response
          headers: *cors-headers
      x-amazon-apigateway-integration: *cors-options-integration
    get:
      summary: Get sync status
      description: Retrieve current synchronization status for authenticated user
      operationId: getSyncStatus
      tags:
        - Sync
      security:
        - JWTAuth: []
      responses:
        '200':
          description: Sync status retrieved successfully
          headers: *cors-response-headers
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SyncStatusResponse'
        '401': *error-401
        '500': *error-500
      x-amazon-apigateway-integration: *user-lambda-integration

components:
  securitySchemes:
    JWTAuth:
      type: apiKey
      name: Cookie
      in: header
      description: JWT token in ridelines_auth cookie
      x-amazon-apigateway-authtype: custom
      x-amazon-apigateway-authorizer:
        type: request
        authorizerUri: "arn:aws:apigateway:$${AWS::Region}:lambda:path/2015-03-31/functions/${auth_verify_lambda_arn}/invocations"
        authorizerCredentials: "${auth_verify_lambda_role_arn}"
        authorizerResultTtlInSeconds: 300
        identitySource: "method.request.header.Cookie"

  schemas:
    # Request Parameter Types
    LoginQueryParams:
      type: object
      properties:
        redirect_path:
          type: string
          nullable: true
          description: Optional path to redirect to after successful authentication
          example: "/dashboard"

    CallbackQueryParams:
      type: object
      required:
        - code
        - state
      properties:
        code:
          type: string
          description: Authorization code from intervals.icu
        state:
          type: string
          format: uuid
          description: State parameter for CSRF protection
          example: "550e8400-e29b-41d4-a716-446655440000"
    # User Types
    UserProfile:
      type: object
      required:
        - id
        - athlete_id
        - created_at
        - updated_at
      properties:
        id:
          type: string
          format: uuid
          description: Internal user ID
          example: "550e8400-e29b-41d4-a716-446655440000"
        athlete_id:
          type: string
          description: intervals.icu athlete ID
          example: "i351926"
        name:
          type: string
          nullable: true
          description: Name from intervals.icu
          example: "John Doe"
        email:
          type: string
          format: email
          nullable: true
          description: Email address from intervals.icu
          example: "john@example.com"
        created_at:
          type: string
          format: date-time
          description: User account creation timestamp
          example: "2024-01-15T10:30:00Z"
        updated_at:
          type: string
          format: date-time
          description: User account last update timestamp
          example: "2024-01-15T10:30:00Z"

    UserProfileResponse:
      type: object
      required:
        - user
        - pmtiles_url
      properties:
        user:
          $ref: '#/components/schemas/UserProfile'
        pmtiles_url:
          type: string
          format: uri
          description: CDN URL for user's PMTiles activity data
          example: "https://d1234.cloudfront.net/activities/i351926.pmtiles"

    # Sync Types
    SyncResponse:
      type: object
      required:
        - status
        - message
      properties:
        status:
          type: string
          enum: [initiated]
          description: Current sync status
        message:
          type: string
          description: Human-readable status message
          example: "Activity synchronization initiated"

    SyncStatusResponse:
      type: object
      required:
        - status
        - last_sync_at
      properties:
        status:
          type: string
          enum: [idle, syncing, completed, failed]
          description: Current sync status
        last_sync_at:
          type: string
          format: date-time
          nullable: true
          description: Timestamp of last completed sync
          example: "2024-01-15T10:30:00Z"
        activities_count:
          type: integer
          nullable: true
          description: Number of activities synchronized
          example: 142
        error_message:
          type: string
          nullable: true
          description: Error message if sync failed
          example: "intervals.icu API rate limit exceeded"

    # Error Types
    ErrorResponse:
      type: object
      required:
        - error
      properties:
        error:
          type: string
          description: Error message
          example: "Invalid state parameter"
        details:
          type: string
          nullable: true
          description: Additional error details
          example: "State parameter not found or expired"


tags:
  - name: Authentication
    description: OAuth authentication endpoints
  - name: User
    description: User profile and data endpoints
  - name: Sync
    description: Activity synchronization endpoints
